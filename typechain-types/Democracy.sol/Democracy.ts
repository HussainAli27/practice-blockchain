/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DemocracyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "candidates"
      | "destroy"
      | "hasRegistered"
      | "isDestroyed"
      | "isNameTaken"
      | "registerAsCandidate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CandidateRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "candidates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDestroyed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isNameTaken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerAsCandidate",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDestroyed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNameTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsCandidate",
    data: BytesLike
  ): Result;
}

export namespace CandidateRegisteredEvent {
  export type InputTuple = [name: string, candidateAddress: AddressLike];
  export type OutputTuple = [name: string, candidateAddress: string];
  export interface OutputObject {
    name: string;
    candidateAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Democracy extends BaseContract {
  connect(runner?: ContractRunner | null): Democracy;
  waitForDeployment(): Promise<this>;

  interface: DemocracyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  candidates: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        name: string;
        candidateAddress: string;
        votes: bigint;
      }
    ],
    "view"
  >;

  destroy: TypedContractMethod<[], [void], "nonpayable">;

  hasRegistered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isDestroyed: TypedContractMethod<[], [boolean], "view">;

  isNameTaken: TypedContractMethod<[arg0: string], [boolean], "view">;

  registerAsCandidate: TypedContractMethod<
    [_name: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        name: string;
        candidateAddress: string;
        votes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "destroy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDestroyed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isNameTaken"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAsCandidate"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;

  getEvent(
    key: "CandidateRegistered"
  ): TypedContractEvent<
    CandidateRegisteredEvent.InputTuple,
    CandidateRegisteredEvent.OutputTuple,
    CandidateRegisteredEvent.OutputObject
  >;

  filters: {
    "CandidateRegistered(string,address)": TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;
    CandidateRegistered: TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;
  };
}
